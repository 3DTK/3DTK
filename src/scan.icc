/**
 * @file
 * @brief Representation of a 3D scan
 * @author Kai Lingemann. Institute of Computer Science, University of Osnabrueck, Germany.
 * @author Andreas Nuechter. Institute of Computer Science, University of Osnabrueck, Germany.
 */

/**
 * Overridden "<<" operator for sending a scan to a stream
 */
inline ostream& operator<<(ostream& os, const Scan& s)
{
  for (unsigned int i = 0; i < s.points.size(); i++) {
    os << s.points[i] << endl;
  }
  return os;
}

inline int Scan::get_points_red_size() const
{
  return points_red_size;
}

inline void Scan::clearPoints() {
  points.clear();
}

inline void Scan::setPoints(vector <Point>* _points) {
  points = *_points;
}

/**
 * Accessor for roboters transMat
 * @return Roboter transformation as double[16]
 */
inline const double* Scan::get_transMat() const
{
  return transMat;
}

 /**
 * Accessor for roboter position
 * @return Roboter position as double[3] 
 */
inline const double* Scan::get_rPos() const
{
  return rPos;
}
 
/**
 * Accessor for roboter oritentation
 * @return Roboter orientation as double[3] 
 */
inline const double* Scan::get_rPosTheta() const
{
  return rPosTheta;	
}

/**
 * Accessor for roboter position
 * @return Roboter position as double[3] 
 */
inline const double* Scan::get_rPosQuat() const
{
  return rQuat;
}

/**
 * Accessor for 3D points
 * @return Vector of all points 
 */
inline const vector <Point>* Scan::get_points() const
{
  return &points;
}

/**
 * Accessor for 3D points
 * @return Vector of all reduced (or copied) points 
 */
inline const double** Scan::get_points_red() const
{
  return (const double**)points_red;
}

/**
 * Resets the pose of the scan to identity
 */
inline void Scan::resetPose()
{

  double tinv[16];
  M4inv(transMat, tinv);
  transform(tinv, INVALID);

  rPos[0] = rPosOrg[0];
  rPos[1] = rPosOrg[1];
  rPos[2] = rPosOrg[2];
  rPosTheta[0] = rPosThetaOrg[0];
  rPosTheta[1] = rPosThetaOrg[1];
  rPosTheta[2] = rPosThetaOrg[2];
  EulerToMatrix4(rPos, rPosTheta, transMat);
  
  M4identity(dalignxf);
}


#
# Draft version of XML schema (in compact RELAX NG) for E57 Data format.
#
# Copyright (C) 2010 Kevin Ackley (kackley@gwi.net)
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
# 
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

default namespace e57 = "http://www.astm.org/COMMIT/E57/2010-e57-v0.6"
datatypes         xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

start = element e57Root{E57Root}

E57Root = 
    Structure
  & element formatName{String}
  & element guid{String}
  & element versionMajor{Integer}
  & element versionMinor{Integer}
  & element e57LibraryVersion{String}?  
  & element creationDateTime{DateTime}?
  & element data3D{HeterogeneousVector & element vectorChild{Data3D}*}?
  & element images2D{HeterogeneousVector & element vectorChild{Image2D}*}?
  & element coordinateMetadata{String}?

Data3D =
    Structure
  & element guid{String}
  & element points{CompressedVector & element prototype{PointRecord}}
  & element pose{RigidBodyTransform}?
  & element originalGuids{HomogeneousVector & element vectorChild{String}*}?
  & element pointGroupingSchemes{PointGroupingSchemes}?
  & element name{String}?
  & element description{String}?
  & element cartesianBounds{CartesianBounds}?
  & element sphericalBounds{SphericalBounds}?
  & element indexBounds{IndexBounds}?
  & element acquisitionStart{DateTime}?
  & element acquisitionEnd{DateTime}?
  & element sensorVendor{String}?
  & element sensorModel{String}?
  & element sensorSerialNumber{String}?
  & element sensorHardwareVersion{String}?
  & element sensorSoftwareVersion{String}?
  & element sensorFirmwareVersion{String}?
  & element temperature{Float}?
  & element relativeHumidity{Float}?
  & element atmosphericPressure{Float}?

PointRecord = 
    Structure
  & element cartesianX{Float | ScaledInteger | Integer}?
  & element cartesianY{Float | ScaledInteger | Integer}?
  & element cartesianZ{Float | ScaledInteger | Integer}?
  & element sphericalRange{Float | ScaledInteger | Integer}?
  & element sphericalAzimuth{Float | ScaledInteger}?
  & element sphericalElevation{Float | ScaledInteger}?
  & element rowIndex{Integer}?
  & element columnIndex{Integer}?
  & element returnCount{Integer}?
  & element returnIndex{Integer}?
  & element timeStamp{Float | ScaledInteger | Integer}?
  & element intensity{Float | ScaledInteger | Integer}?
  & element colorRed{Float | ScaledInteger | Integer}?
  & element colorGreen{Float | ScaledInteger | Integer}?
  & element colorBlue{Float | ScaledInteger | Integer}?
  & element cartesianInvalidState{Integer}?
  & element sphericalInvalidState{Integer}?
  & element isTimeStampInvalid{Integer}?
  & element isIntensityInvalid{Integer}?
  & element isColorInvalid{Integer}?

PointGroupingSchemes = 
    Structure
  & element groupingByLine{GroupingByLine}?
    
GroupingByLine = 
    Structure
  & element idElementName{String}
  & element groups{CompressedVector & element prototype{LineGroupRecord}}
    
LineGroupRecord = 
    Structure
  & element idElementValue{Integer}
  & element startPointIndex{Integer}?
  & element pointCount{Integer}?
  & element cartesianBounds{CartesianBounds}?
  & element sphericalBounds{SphericalBounds}?

RigidBodyTransform = 
    Structure
  & element rotation{Quaternion}
  & element translation{Translation}
  
Quaternion = 
    Structure
  & element w{DoubleFloat}
  & element x{DoubleFloat}
  & element y{DoubleFloat}
  & element z{DoubleFloat}
   
Translation = 
    Structure
  & element x{DoubleFloat}
  & element y{DoubleFloat}
  & element z{DoubleFloat}
  
Image2D = 
    Structure
  & element guid{String}
  & element visualReferenceRepresentation{VisualReferenceRepresentation}?
  & element pinholeRepresentation{PinholeRepresentation}?
  & element sphericalRepresentation{SphericalRepresentation}?
  & element cylindricalRepresentation{CylindricalRepresentation}?
  & element pose{RigidBodyTransform}?
  & element associatedData3DGuid{String}?
  & element name{String}?
  & element description{String}?
  & element acquisitionDateTime{DateTime}?
  & element sensorVendor{String}?
  & element sensorModel{String}?
  & element sensorSerialNumber{String}?

VisualReferenceRepresentation = 
    Structure
  & element jpegImage{Blob}?
  & element pngImage{Blob}?
  & element imageMask{Blob}?
  & element imageWidth{Integer}
  & element imageHeight{Integer}

PinholeRepresentation = 
    Structure
  & element jpegImage{Blob}?
  & element pngImage{Blob}?
  & element imageMask{Blob}?
  & element imageWidth{Integer}
  & element imageHeight{Integer}
  & element focalLength{Float}
  & element pixelWidth{Float}
  & element pixelHeight{Float}
  & element principalPointX{Float}
  & element principalPointY{Float}

SphericalRepresentation = 
    Structure
  & element jpegImage{Blob}?
  & element pngImage{Blob}?
  & element imageMask{Blob}?
  & element imageWidth{Integer}
  & element imageHeight{Integer}
  & element pixelWidth{Float}
  & element pixelHeight{Float}

CylindricalRepresentation = 
    Structure
  & element jpegImage{Blob}?
  & element pngImage{Blob}?
  & element imageMask{Blob}?
  & element imageWidth{Integer}
  & element imageHeight{Integer}
  & element radius{Float}
  & element principalPointY{Float}
  & element pixelWidth{Float}
  & element pixelHeight{Float}

CartesianBounds = 
    Structure
  & element xMinimum{Float}
  & element xMaximum{Float}
  & element yMinimum{Float}
  & element yMaximum{Float}
  & element zMinimum{Float}
  & element zMaximum{Float}

SphericalBounds = 
    Structure
  & element rangeMinimum{Float}
  & element rangeMaximum{Float}
  & element elevationMinimum{Float}
  & element elevationMaximum{Float}
  & element azimuthStart{Float}?
  & element azimuthEnd{Float}?

IndexBounds = 
    Structure
  & element rowMinimum{Integer}?
  & element rowMaximum{Integer}?
  & element columnMinimum{Integer}?
  & element columnMaximum{Integer}?
  & element returnMinimum{Integer}?
  & element returnMaximum{Integer}?

DateTime = 
    Structure
  & element dateTimeValue{Float}
  & element isAtomicClockReferenced{Integer}?
 
###=====================================================
### E57 Primitive types:
###
Integer =
    attribute type{"Integer"}
  & attribute minimum{xsd:integer}?
  & attribute maximum{xsd:integer}?
  & xsd:integer?

ScaledInteger =
    attribute type{"ScaledInteger"}
  & attribute minimum{xsd:integer}?
  & attribute maximum{xsd:integer}?
  & attribute scale{xsd:double}?
  & attribute offset{xsd:double}?
  & xsd:integer?

Float =
    attribute type{"Float"}
  & attribute precision{"single" | "double"}?
  & attribute minimum{xsd:double}?
  & attribute maximum{xsd:double}?
  & xsd:double?
  
DoubleFloat =
    attribute type{"Float"}
  & attribute precision{"double"}?
  & attribute minimum{xsd:double}?
  & attribute maximum{xsd:double}?
  & xsd:double?
  
String =
    attribute type{"String"}
  & text

Blob =
    attribute type{"Blob"}
  & attribute fileOffset{xsd:integer}
  & attribute length{xsd:integer}
  
Structure = 
    attribute type{"Structure"}
  & AllowOtherNameSpaceElements
  
HomogeneousVector = 
    attribute type{"Vector"}
  & attribute allowHeterogeneousChildren{"0"}?
  ### the vectorChild element must be spec'd explicitly when this pattern is used
  
HeterogeneousVector = 
    attribute type{"Vector"}
  & attribute allowHeterogeneousChildren{"1"}?
  ### the vectorChild element must be spec'd explicitly when this pattern is used
  
CompressedVector =
    attribute type{"CompressedVector"}
  & attribute fileOffset{xsd:integer}
  & attribute recordCount{xsd:integer}
  & element codecs{HeterogeneousVector & element vectorChild{Codec}*}?
  ### the prototype element must be spec'd explicitly when this pattern is used
  
Codec = 
    Structure
  & element inputs{HomogeneousVector & element vectorChild{String}*}
  & element bitPackCodec{Structure}?

### Allow all E57 elements that are not in the e57 namespace
### Used in every Structure, so will allow unknown extension fields.
AllowOtherNameSpaceElements = element * - e57:* {(attribute *{text} | text | AnyElement)*}*

### Matches any well-formed XML fragment
AnyElement = element *{(attribute *{text} | text | AnyElement)*}
